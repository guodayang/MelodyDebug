// Copyright (c) 2012 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/frame_cpptoc.h"
#include "libcef_dll/ctocpp/jsdialog_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

bool CefJSDialogHandlerCToCpp::OnJSAlert(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, const CefString& message) {
  if (CEF_MEMBER_MISSING(struct_, on_jsalert))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return false;
  // Verify param: message; type: string_byref_const
  DCHECK(!message.empty());
  if (message.empty())
    return false;

  // Execute
  int _retval = struct_->on_jsalert(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame),
      message.GetStruct());

  // Return type: bool
  return _retval?true:false;
}

bool CefJSDialogHandlerCToCpp::OnJSConfirm(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, const CefString& message, bool& retval) {
  if (CEF_MEMBER_MISSING(struct_, on_jsconfirm))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return false;
  // Verify param: message; type: string_byref_const
  DCHECK(!message.empty());
  if (message.empty())
    return false;

  // Translate param: retval; type: bool_byref
  int retvalInt = retval;

  // Execute
  int _retval = struct_->on_jsconfirm(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame),
      message.GetStruct(),
      &retvalInt);

  // Restore param:retval; type: bool_byref
  retval = retvalInt?true:false;

  // Return type: bool
  return _retval?true:false;
}

bool CefJSDialogHandlerCToCpp::OnJSPrompt(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, const CefString& message,
    const CefString& defaultValue, bool& retval, CefString& result) {
  if (CEF_MEMBER_MISSING(struct_, on_jsprompt))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return false;
  // Verify param: message; type: string_byref_const
  DCHECK(!message.empty());
  if (message.empty())
    return false;
  // Verify param: defaultValue; type: string_byref_const
  DCHECK(!defaultValue.empty());
  if (defaultValue.empty())
    return false;

  // Translate param: retval; type: bool_byref
  int retvalInt = retval;

  // Execute
  int _retval = struct_->on_jsprompt(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame),
      message.GetStruct(),
      defaultValue.GetStruct(),
      &retvalInt,
      result.GetWritableStruct());

  // Restore param:retval; type: bool_byref
  retval = retvalInt?true:false;

  // Return type: bool
  return _retval?true:false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefJSDialogHandlerCToCpp, CefJSDialogHandler,
    cef_jsdialog_handler_t>::DebugObjCt = 0;
#endif

